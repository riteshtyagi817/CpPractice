1. while(cin >> x){ // code } // this loop reads element one after another,until there is no more data available in in the input.
2. getline(cin, in) where in is string in to read the line with spaces.
3. to read the input from the files and dump it to the files->
	// just place the below lines in the start 
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
4. the following code defines a long long variable:
long long x = 123456789123456789LL
5. g++ compiler also supports __int128__t but not not available in all contest systems
6. An important property of remainders is that the following formulas hold
(a+b)mod m = ( a mod m + b mod m ) mod m 
(a - b)mod m = ( a mod m - b mod m ) mod m
(a * b) mod m = ( a mod m * b mod m) mod m
7. An easy way to make sure that there are no negative remainders is to first calculate the remainder as usual and then add m if the result is negative:
x = x%m
if ( x < 0) x += m;
8. printf("%.9f\n",x); -- can be handly when printing the required precision
9. it is risky to compare two floating numbers with == but we can use below thing
if(abs(a-b) < 1e-9){
	// a and b are equal
}
10. long long can be shortened as follows:
typedef long long ll;
11. some other usages of typedef
typedef vector<int> vi;
typedef pair<int,int> pi;
12.some macros
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for(int i = a; i <= b;i++)

12. More generally x is divisible by 2^k exactly when x&(2^k -1) is zero.
13. ~(not operator) --> ~x = -x -1 or ~29 = -30
14. x << k corresponds to multiplying x by 2^k and x >> k corresponds to dividing x by 2^k rounded down to an integer.
15. formula x | (1 << k) sets the kth bit of x to one.
16. formula  x & ~(1 << k) sets the kth bit of x to zero.
17. formula x ^ ( 1 << k) inverts the kth bit of x.
18.formula x & (x-1) sets the last one bit of x to zero 
19.formula x & (-x) sets all the one bit to zero except for the last one bit
20. formula x | ( x -1) inverts all the the bits after the last one bit
21. formula a positive number x is a power of two exactly when x & (x-1) = 0
22. one pitfall is that 1 << k is always an int bit mask , an easy way to create a long long 
bit mask is 1LL << k
23.g++ compiler provides following functions for counting bits
__builtin_clz(x) -- the number of zeros a the begining of the bit wise representation
__builtin_ctx(x) -- the number of zeroes at the end
__builtin_popcount(x) -- the number of ones in the bit wise representation
__builtin_parity(x) -- the parity(even or odd) of the number of ones in the bit wise representation

