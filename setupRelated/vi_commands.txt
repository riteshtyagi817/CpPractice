vi Commands
Below you can see some of the most important vi commands.

Starting, Exiting, Reading and Writing Files in vi
Command

Description

vi myfile

Start vi and edit myfile

vi -r myfile

Start vi and edit myfile in recovery mode from a system crash

:r file2<RET>

Read in file2 and insert at current position

:w<RET>

Write out the file

:w myfile<RET>

Write out the file to myfile

:w! file2<RET>

Overwrite file2

:x<RET> or :wq<RET>

Exit vi and write out modified file

:q<RET>

Quit vi

:q!<RET>

Quit vi even though modifications have not been saved


Changing Position in vi
Command

Description

arrow keys

Use the arrow keys for up, down, left and right; or:

j or <RET>

One line down

k

One line up

h or Backspace

One character left

l or Space

One character right

0

Move to beginning of line

$

Move to end of line

w

Move to beginning of next word

b

Move back to beginning of preceding word

:0 <RET> or 1G

Move to beginning of file

:n <RET> or nG

Move to line n

:$ <RET> or G

Move to last line in file

^f or PageDown

Move forward one page

^b or PageUp

Move backward one page

^l

Refresh and center screen


Searching for Text in vi
Command

Description

/pattern<RET>

Search forward for pattern

n

Move to next occurrence of search pattern

string<RET>

Search backward for pattern

N

Move to previous occurrence of search pattern


Changing, Adding and Deleting Text in vi
Command

Description

a

Append text after cursor; stop upon Escape key

A

Append text at end of current line; stop upon Escape key

i

Insert text before cursor; stop upon Escape key

I

Insert text at beginning of current line; stop upon Escape key

o

Start a new line below current line, insert text there; stop upon Escape key

O

Start a new line above current line, insert text there; stop upon Escape key

r

Replace character at current position

R

Replace text starting with current position; stop upon Escape key

x

Delete character at current position

Nx

Delete N characters, starting at current position

dw

Delete the word at the current position

D

Delete the rest of the current line

dd

Delete the current line

Ndd or dNd

Delete N lines

u

Undo the previous operation

yy

Yank (cut) the current line and put it in buffer

Nyy or yNy

Yank (cut) N lines and put it in buffer

p

Paste at the current position the yanked line or lines from the buffer

++++++++++++++++++++++++++++++++++++++++++
$ PS1="\h:\u:\w>"
c7:coop:/tmp>


Character

Meaning

Example Output

\t

Time in HH:MM:SS

08:43:40

\d

Date in ”Weekday Month Date”

Fri Mar 12

\n

Newline


\s

Shell name

bash

\w

Current working directory

/usr/local/bin

\W

Basename of current working directory

bin

\u

User

coop

\h

Hostname

c7

\#

Command number (this session)

43

\!

History number (in history file)

1057

Note you can embed any other string you like in the prompt.
++++++++++++++++++++++++++++++++

Special Characters
A number of characters have a special meaning and cause certain actions to take place. If you want to print them directly, you usually have to prefix them with a backslash (\) or enclose them in single quotes.

Redirection Special Characters
Character

Usage

\#>

Redirect output descriptor (Default # = 1, stdout)

<

Redirect input descriptor

>>

Append output

>&

Redirect stdout and stderr (equivalent to .. > .. 2>&1)

Compound Commands Special Characters
Character

Usage

|

Piping

()

Execute in a separate shell

&&

AND list

||

OR list

;

Separate commands

Expansion Special Characters
Character

Usage

{}

Lists

~

Usually means $HOME

$

Parameter substitution

‘

Back tick; used in expression evaluation (also $() syntax)

$(( ))

Arithmetic substitution

[]

Wildcard expressions, and conditionals

Escapes Special Characters
Character

Usage

\

End of line, escape sequence

’   ’

Take exactly as is

"  "

Take as is, but do parameter expansion

Other Special Characters
Character

Usage

&

Redirection and putting task in background

#

Used for comments

*?

Used in wildcard expansion

!

Used in history expansion


Note there are three different quoting mechanisms listed above:

\ (as in \|; try echo | vs echo \|)

single quotes: preserves literal value

double quotes: same except for $, ‘, and \ .

Note you can get a literal quote character by using \’ or \".
$ echo $HOME
$ echo \$HOME
$ echo ’$HOME’
$ echo "$HOME"



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Redirection
File descriptors:

0 = stdin

1 = stdout

2 = stderr

less < file same as less file or less 0< file

foo > file ; redirect stdout (same as foo 1> file)

foo 2> file ; redirect stderr

foo >> file ; append stdout to file

foo >& file or foo > file 2>&1;

sends stdout and stderr to a file, but foo >>& file does not work ; you have to do foo >> file 2>&1

Note that foo > file 2>&1 is not the same as foo 2>&1 > file; the order of arguments is important.

A nice non-portable trick you can use in Linux is to take advantage of the device nodes:



/dev/stdin
/dev/stdout
/dev/stderr
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Pipes
Each step in a pipeline is a separate shell; i.e. there is a true pipeline. Be careful with redirection. Also |& does not work.

cat nofile | grep string produces an error if nofile does not exist.

cat nofile | grep string 2>errs does not work.

cat nofile 2>&1 | grep string > errs does not work.

cat nofile 2>errors | grep string does work.

The tee utility can be very useful for saving output while still looking at the screen:

$ foobar | tee filename
$ foobar 2>&1 | tee filename

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

There are two mechanisms for substituting the result of an operation into a command:

12
$ ls -l ‘which --skip-alias emacs‘
$ ls -l $(which --skip-alias emacs)
The second form permits nesting, while the first form does not. Note that the first form has “backticks” (‘) not apostrophes.

Arithmetic expressions may be evaluated in two different ways, using the expr utility, or the $((..)) syntax:

For x=3:

Arithmetic Expression Evaluation Forms

Expression

Gives

echo $x + 1

3+1

echo $(expr $x + 1)

4

echo $((x+1))

4

echo $(($x + 1 ))

4

echo $(expr $x+1)

3+1

The $((..)) syntax is more modern and preferred; expr is less efficient, as it invokes an external program and is trickier to use.

Note that $var, $(cmd), ‘cmd‘, and $((...)) all expand inside double quotes.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


$ MY_BIN_DIR=$HOME/my_bin_dir
$ export PATH=$MY_BIN_DIR:$PATH
$ export PATH=$PATH:$MY_BIN_DIR

You can save changes to your path by putting them in your shell initialization file, .bashrc in your home directory.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Hard and Soft (Symbolic) Links
The ln program can be used to create hard links and (with the -s option) soft links, also known as symbolic links or symlinks.

Suppose file1 already exists. A hard link to it is created with the command:

12345
$ ln file1 file2
$ ls -li file1 file2

84 -rw-rw-r-- 2 coop coop 1551 Jun 16 16:28 file1
84 -rw-rw-r-- 2 coop coop 1551 Jun 16 16:28 file2
Note that two files now appear to exist. However, a closer inspection of the file listing shows that this is not quite true.

The -i option to ls prints out in the first column the inode number, which in UNIX filesystems is unique for each file object. This field is the same for both of these files; what is really going on here is that it is only one file, but it has two names. The 2 that appears later in the ls listing indicates that this inode has two links to it.

Let's consider another example:

1234
$ ls -li /bin/g*zip

194339 -rwxr-xr-x 3 root root 62872 Jan 14 13:06 /bin/gunzip
194339 -rwxr-xr-x 3 root root 62872 Jan 14 13:06 /bin/gzip
which shows that gzip and gunzip are both only one program and the executable is only one file; whether it compresses or decompresses files depends on which name it is invoked with, which is always available as argv[0] when the program executes.

Hard links are very useful and they save space, but you have to be careful with their use, sometimes in subtle ways. For one thing, if you remove either file1 or file2 in the above example, the inode object (and the remaining file name) will remain, which is generally desirable.

However, if you edit one of the files, exactly what happens depends on your editor; most editors, including vi and emacs, will retain the link by default, but it is possible that modifying one of the names may break the link and result in the creation of two objects.

Symbolic (or soft) links are created with the -s option, as in:

12345
$ ln -s file1 file2
$ ls -li file1 file2

84 -rw-rw-r-- 1 coop coop 1551 Jun 16 16:28 file1
85 lrwxrwxrwx 1 coop coop    5 Jun 16 16:43 file2 -> file1
Notice file2 no longer appears to be a regular file, and it clearly points to file1 and has a different inode number.

Symbolic links take no extra space on the filesystem (unless their names are very long), as they are stored directly in the directory inode. They are extremely convenient, as they can easily be modified to point to different places.

Unlike hard links, soft links can point to objects even on different filesystems (or partitions), which may or not be currently mounted or even exist. In the case where the link does not point to a currently mounted or existing object, one obtains a dangling link.

The symlinks utility can be used to examine current symbolic links, as in:

123456
c7:/usr/share/gdb/auto-load>symlinks -rv .

relative: /usr/share/gdb/auto-load/lib -> usr/lib
dangling: /usr/share/gdb/auto-load/sbin -> usr/sbin
relative: /usr/share/gdb/auto-load/lib64 -> usr/lib64
dangling: /usr/share/gdb/auto-load/bin -> usr/bin
 easily be modified to point to different places.




